from __future__ import annotations

import csv
from datetime import datetime, time, timedelta
from decimal import Decimal
from io import StringIO

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from sqlalchemy import func, select

from ..db import AsyncSessionLocal
from ..keyboards import list_buttons, main_menu_kb
from ..models import Counterparty, Product, ReceiptItem, Shipment, ShipmentItem
from ..services.pdf import format_quantity, format_money_numeric


router = Router(name="reports")


class SalesExportStates(StatesGroup):
    waiting_start_date = State()
    waiting_end_date = State()
    viewing_shipments = State()
    selecting_period = State()
    selecting_specific_date = State()


@router.callback_query(F.data == "current_stock")
async def current_stock(call: CallbackQuery) -> None:
    receipt_subq = (
        select(
            ReceiptItem.product_id.label("product_id"),
            func.coalesce(func.sum(ReceiptItem.quantity), 0).label("total_receipt"),
        )
        .group_by(ReceiptItem.product_id)
        .subquery()
    )

    shipment_subq = (
        select(
            ShipmentItem.product_id.label("product_id"),
            func.coalesce(func.sum(ShipmentItem.quantity), 0).label("total_shipment"),
        )
        .group_by(ShipmentItem.product_id)
        .subquery()
    )

    stmt = (
        select(
            Product.code,
            Product.name,
            func.coalesce(receipt_subq.c.total_receipt, 0) - func.coalesce(shipment_subq.c.total_shipment, 0),
        )
        .select_from(Product)
        .join(receipt_subq, receipt_subq.c.product_id == Product.id, isouter=True)
        .join(shipment_subq, shipment_subq.c.product_id == Product.id, isouter=True)
        .order_by(Product.name)
    )

    async with AsyncSessionLocal() as session:
        rows = (await session.execute(stmt)).all()

    if not rows:
        await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–≤–∞—Ä–∞–º", show_alert=True)
        return

    lines = ["–¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏:"]
    total_positions = 0

    for code, name, balance in rows:
        balance_decimal = Decimal(balance or 0)
        if balance_decimal == 0:
            continue
        total_positions += 1
        lines.append(
            f"‚Ä¢ {code} {name}: {format_quantity(balance_decimal)}"
        )

    if total_positions == 0:
        lines.append("–í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ä–∞–≤–Ω—ã –Ω—É–ª—é.")

    try:
        await call.message.edit_text("\n".join(lines), reply_markup=main_menu_kb())
    except Exception:
        await call.message.answer("\n".join(lines), reply_markup=main_menu_kb())

    await call.answer()


@router.callback_query(F.data == "export_sales")
async def export_sales_start(call: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(SalesExportStates.selecting_period)
    
    buttons = [
        ("üìÖ –°–µ–≥–æ–¥–Ω—è", "period_today"),
        ("üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", "period_this_week"),
        ("üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", "period_this_month"),
        ("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "period_custom"),
        ("üìÖ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å", "period_specific_day"),
        ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main")
    ]
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂:"
    
    try:
        await call.message.edit_text(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )
    except Exception:
        await call.message.answer(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )
    await call.answer()


def _parse_date(text: str) -> datetime | None:
    try:
        return datetime.strptime(text, "%d.%m.%Y")
    except ValueError:
        return None


def _cents_to_str(cents: int) -> str:
    sign = "-" if cents < 0 else ""
    rub = abs(cents) // 100
    kop = abs(cents) % 100
    return f"{sign}{rub}.{kop:02d}"


def _get_today_period() -> tuple[datetime, datetime]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"""
    today = datetime.now().date()
    start = datetime.combine(today, time.min)
    end = datetime.combine(today, time.max)
    return start, end


def _get_this_week_period() -> tuple[datetime, datetime]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
    today = datetime.now().date()
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    monday = today - timedelta(days=today.weekday())
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    sunday = monday + timedelta(days=6)
    
    start = datetime.combine(monday, time.min)
    end = datetime.combine(sunday, time.max)
    return start, end


def _get_this_month_period() -> tuple[datetime, datetime]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    today = datetime.now().date()
    # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    first_day = today.replace(day=1)
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if today.month == 12:
        last_day = today.replace(year=today.year + 1, month=1, day=1) - timedelta(days=1)
    else:
        last_day = today.replace(month=today.month + 1, day=1) - timedelta(days=1)
    
    start = datetime.combine(first_day, time.min)
    end = datetime.combine(last_day, time.max)
    return start, end


@router.callback_query(SalesExportStates.selecting_period, F.data == "period_today")
async def period_today(call: CallbackQuery, state: FSMContext):
    start_dt, end_dt = _get_today_period()
    await _process_sales_export(call, state, start_dt, end_dt)


@router.callback_query(SalesExportStates.selecting_period, F.data == "period_this_week")
async def period_this_week(call: CallbackQuery, state: FSMContext):
    start_dt, end_dt = _get_this_week_period()
    await _process_sales_export(call, state, start_dt, end_dt)


@router.callback_query(SalesExportStates.selecting_period, F.data == "period_this_month")
async def period_this_month(call: CallbackQuery, state: FSMContext):
    start_dt, end_dt = _get_this_month_period()
    await _process_sales_export(call, state, start_dt, end_dt)


@router.callback_query(SalesExportStates.selecting_period, F.data == "period_custom")
async def period_custom(call: CallbackQuery, state: FSMContext):
    await state.update_data(selecting_specific_day=False)
    await state.set_state(SalesExportStates.waiting_start_date)
    text = (
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )
    try:
        await call.message.edit_text(text)
    except Exception:
        await call.message.answer(text)
    await call.answer()


@router.callback_query(SalesExportStates.selecting_period, F.data == "period_specific_day")
async def period_specific_day(call: CallbackQuery, state: FSMContext):
    await state.set_state(SalesExportStates.selecting_specific_date)
    
    today = datetime.now().date()
    first_of_month = today.replace(day=1)
    first_of_year = today.replace(month=1, day=1)
    
    buttons = [
        (f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')})", f"specific_today"),
        (f"üìÖ {first_of_month.strftime('%d.%m.%Y')} (–ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞)", f"specific_first_month"),
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≥–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ 1 —è–Ω–≤–∞—Ä—è
    if first_of_year != today and first_of_year != first_of_month:
        buttons.append((f"üìÖ {first_of_year.strftime('%d.%m.%Y')} (–ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≥–æ–¥–∞)", f"specific_first_year"))
    
    buttons.extend([
        ("üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", "specific_custom"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_periods"),
        ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main")
    ])
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å:"
    
    try:
        await call.message.edit_text(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )
    except Exception:
        await call.message.answer(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )
    await call.answer()


@router.callback_query(SalesExportStates.selecting_period, F.data == "main")
async def back_to_main_from_periods(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    except Exception:
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await call.answer()


@router.callback_query(SalesExportStates.selecting_specific_date, F.data == "specific_today")
async def specific_today(call: CallbackQuery, state: FSMContext):
    start_dt, end_dt = _get_today_period()
    await _process_sales_export(call, state, start_dt, end_dt)


@router.callback_query(SalesExportStates.selecting_specific_date, F.data == "specific_first_month")
async def specific_first_month(call: CallbackQuery, state: FSMContext):
    today = datetime.now().date()
    first_of_month = today.replace(day=1)
    start_dt = datetime.combine(first_of_month, time.min)
    end_dt = datetime.combine(first_of_month, time.max)
    await _process_sales_export(call, state, start_dt, end_dt)


@router.callback_query(SalesExportStates.selecting_specific_date, F.data == "specific_first_year")
async def specific_first_year(call: CallbackQuery, state: FSMContext):
    today = datetime.now().date()
    first_of_year = today.replace(month=1, day=1)
    start_dt = datetime.combine(first_of_year, time.min)
    end_dt = datetime.combine(first_of_year, time.max)
    await _process_sales_export(call, state, start_dt, end_dt)


@router.callback_query(SalesExportStates.selecting_specific_date, F.data == "specific_custom")
async def specific_custom(call: CallbackQuery, state: FSMContext):
    await state.update_data(selecting_specific_day=True)
    await state.set_state(SalesExportStates.waiting_start_date)
    text = (
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    )
    try:
        await call.message.edit_text(text)
    except Exception:
        await call.message.answer(text)
    await call.answer()


@router.callback_query(SalesExportStates.selecting_specific_date, F.data == "back_to_periods")
async def back_to_periods(call: CallbackQuery, state: FSMContext):
    await state.set_state(SalesExportStates.selecting_period)
    
    buttons = [
        ("üìÖ –°–µ–≥–æ–¥–Ω—è", "period_today"),
        ("üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", "period_this_week"),
        ("üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", "period_this_month"),
        ("üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "period_custom"),
        ("üìÖ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å", "period_specific_day"),
        ("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main")
    ]
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂:"
    
    try:
        await call.message.edit_text(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )
    except Exception:
        await call.message.answer(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )
    await call.answer()


@router.callback_query(SalesExportStates.selecting_specific_date, F.data == "main")
async def back_to_main_from_specific(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    except Exception:
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await call.answer()


async def _process_sales_export(message_or_call, state: FSMContext, start_dt: datetime, end_dt: datetime):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–¥–∞–∂ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(
                Shipment.created_at,
                Shipment.doc_number,
                Counterparty.name,
                ShipmentItem.line_number,
                ShipmentItem.product_name,
                ShipmentItem.product_code,
                ShipmentItem.quantity,
                ShipmentItem.sale_price_cents,
                ShipmentItem.purchase_price_cents,
            )
            .join(Shipment.items)
            .join(Shipment.counterparty)
            .where(Shipment.created_at >= start_dt, Shipment.created_at <= end_dt)
            .order_by(Shipment.created_at, Shipment.doc_number, ShipmentItem.line_number)
        )
        rows = result.all()

    if not rows:
        await state.clear()
        if hasattr(message_or_call, 'message'):
            # –≠—Ç–æ CallbackQuery - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_or_call.message.answer(
                "–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                reply_markup=main_menu_kb()
            )
            await message_or_call.answer()
        else:
            # –≠—Ç–æ Message
            await message_or_call.answer(
                "–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                reply_markup=main_menu_kb()
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º
    shipments = {}
    for row in rows:
        created_at, doc_number, counterparty_name, line_number, product_name, product_code, quantity, sale_price_cents, purchase_price_cents = row
        if doc_number not in shipments:
            shipments[doc_number] = {
                'created_at': created_at,
                'counterparty_name': counterparty_name,
                'items': []
            }
        shipments[doc_number]['items'].append({
            'line_number': line_number,
            'product_name': product_name,
            'product_code': product_code,
            'quantity': quantity,
            'sale_price_cents': sale_price_cents,
            'purchase_price_cents': purchase_price_cents,
        })

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    shipment_list = list(shipments.items())
    await state.update_data(
        shipments=shipment_list,
        current_page=0,
        start_date=start_dt.date(),
        end_date=end_dt.date()
    )
    await state.set_state(SalesExportStates.viewing_shipments)
    
    await show_shipments_page(message_or_call, state)


@router.message(SalesExportStates.waiting_start_date)
async def sales_export_start_date(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip().lower()
    if text in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return

    start = _parse_date(text)
    if start is None:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
    data = await state.get_data()
    if data.get("selecting_specific_day"):
        # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –¥–∞—Ç—É
        start_dt = datetime.combine(start.date(), time.min)
        end_dt = datetime.combine(start.date(), time.max)
        await _process_sales_export(message, state, start_dt, end_dt)
    else:
        # –î–ª—è –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        await state.update_data(start_date=start.date())
        await state.set_state(SalesExportStates.waiting_end_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")


@router.message(SalesExportStates.waiting_end_date)
async def sales_export_end_date(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip().lower()
    if text in {"–æ—Ç–º–µ–Ω–∞", "cancel"}:
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return

    end = _parse_date(text)
    if end is None:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    data = await state.get_data()
    start_date = data.get("start_date")

    if start_date is None:
        await state.clear()
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_kb())
        return

    start_dt = datetime.combine(start_date, time.min)
    end_dt = datetime.combine(end.date(), time.max)

    if end_dt < start_dt:
        await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
        return

    await _process_sales_export(message, state, start_dt, end_dt)


async def show_shipments_page(message_or_call, state: FSMContext):
    data = await state.get_data()
    shipments = data.get("shipments", [])
    current_page = data.get("current_page", 0)
    
    if not shipments:
        await message_or_call.answer("–ù–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=main_menu_kb())
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    items_per_page = 5
    start_idx = current_page * items_per_page
    end_idx = start_idx + items_per_page
    page_shipments = shipments[start_idx:end_idx]
    
    text_lines = [f"–ù–∞–∫–ª–∞–¥–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}):"]
    buttons = []
    
    for doc_number, shipment_data in page_shipments:
        created_at = shipment_data['created_at']
        counterparty_name = shipment_data['counterparty_name']
        items_count = len(shipment_data['items'])
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total_sale_cents = sum(
            int(item['quantity'] * item['sale_price_cents']) 
            for item in shipment_data['items']
        )
        total_sale_rub = total_sale_cents / 100
        
        text_lines.append(
            f"‚Ä¢ ‚Ññ{doc_number} –æ—Ç {created_at.strftime('%d.%m.%Y')} "
            f"({counterparty_name}) - {total_sale_rub:.2f} ‚ÇΩ ({items_count} –ø–æ–∑–∏—Ü–∏–π)"
        )
        buttons.append((f"‚Ññ{doc_number}", f"download_shipment:{doc_number}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", "prev_page"))
    if end_idx < len(shipments):
        nav_buttons.append(("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", "next_page"))
    
    if nav_buttons:
        buttons.extend(nav_buttons)
    
    buttons.append(("üìä –°–∫–∞—á–∞—Ç—å CSV", "download_csv"))
    buttons.append(("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main"))
    
    text = "\n".join(text_lines)
    
    if hasattr(message_or_call, 'message'):
        # –≠—Ç–æ CallbackQuery - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_call.message.edit_text(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )
        await message_or_call.answer()
    else:
        # –≠—Ç–æ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_call.answer(
            text,
            reply_markup=list_buttons(buttons, columns=1)
        )


@router.callback_query(SalesExportStates.viewing_shipments, F.data == "prev_page")
async def prev_page(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await show_shipments_page(call, state)


@router.callback_query(SalesExportStates.viewing_shipments, F.data == "next_page")
async def next_page(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    await state.update_data(current_page=current_page + 1)
    await show_shipments_page(call, state)


@router.callback_query(SalesExportStates.viewing_shipments, F.data.startswith("download_shipment:"))
async def download_shipment(call: CallbackQuery, state: FSMContext):
    doc_number = int(call.data.split(":", 1)[1])
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∫–ª–∞–¥–Ω—É—é –≤ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    shipments = data.get("shipments", [])
    
    shipment_data = None
    for num, data_item in shipments:
        if num == doc_number:
            shipment_data = data_item
            break
    
    if not shipment_data:
        await call.answer("–ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º PDF –¥–ª—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    from ..services.pdf import ShipmentPdfData, ShipmentItemData, build_shipment_form_pdf
    
    pdf_items = [
        ShipmentItemData(
            line_number=item['line_number'],
            product_name=item['product_name'],
            product_code=item['product_code'],
            quantity=item['quantity'],
            sale_price_cents=item['sale_price_cents'],
            purchase_price_cents=item['purchase_price_cents'],
        )
        for item in shipment_data['items']
    ]
    
    pdf_data = ShipmentPdfData(
        doc_number=doc_number,
        created_at=shipment_data['created_at'],
        counterparty_name=shipment_data['counterparty_name'],
        items=pdf_items,
    )
    
    form_pdf = build_shipment_form_pdf(pdf_data)
    
    await call.message.answer_document(
        document=BufferedInputFile(form_pdf, filename=f"shipment_{doc_number}.pdf"),
        caption=f"–ù–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ{doc_number}",
    )
    await call.answer()


@router.callback_query(SalesExportStates.viewing_shipments, F.data == "download_csv")
async def download_csv(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    shipments = data.get("shipments", [])
    start_date = data.get("start_date")
    end_date = data.get("end_date")
    
    if not shipments:
        await call.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return
    
    output = StringIO()
    writer = csv.writer(output, delimiter=";")
    writer.writerow(
        [
            "–î–∞—Ç–∞",
            "–ù–∞–∫–ª–∞–¥–Ω–∞—è",
            "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç",
            "–°—Ç—Ä–æ–∫–∞",
            "–¢–æ–≤–∞—Ä",
            "–ö–æ–¥",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            "–¶–µ–Ω–∞ (—Ä—É–±)",
            "–°—É–º–º–∞ (—Ä—É–±)",
            "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±)",
            "–ü—Ä–∏–±—ã–ª—å (—Ä—É–±)",
        ]
    )

    total_sale_cents = 0
    total_purchase_cents = 0

    for doc_number, shipment_data in shipments:
        for item in shipment_data['items']:
            total_sale = int(item['quantity'] * item['sale_price_cents'])
            total_purchase = int(item['quantity'] * item['purchase_price_cents'])
            total_sale_cents += total_sale
            total_purchase_cents += total_purchase

            writer.writerow(
                [
                    shipment_data['created_at'].strftime("%d.%m.%Y"),
                    doc_number,
                    shipment_data['counterparty_name'],
                    item['line_number'],
                    item['product_name'],
                    item['product_code'],
                    format_quantity(item['quantity']),
                    _cents_to_str(item['sale_price_cents']),
                    _cents_to_str(total_sale),
                    _cents_to_str(total_purchase),
                    _cents_to_str(total_sale - total_purchase),
                ]
            )

    csv_bytes = ("\ufeff" + output.getvalue()).encode("utf-8")
    filename = f"sales_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.csv"

    await call.message.answer_document(
        BufferedInputFile(csv_bytes, filename=filename),
        caption="–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
    )

    profit_cents = total_sale_cents - total_purchase_cents
    summary = (
        "–ò—Ç–æ–≥–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:\n"
        f"–í—ã—Ä—É—á–∫–∞: {format_money_numeric(total_sale_cents)} ‚ÇΩ\n"
        f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_money_numeric(total_purchase_cents)} ‚ÇΩ\n"
        f"–ü—Ä–∏–±—ã–ª—å: {format_money_numeric(profit_cents)} ‚ÇΩ"
    )

    await call.message.answer(summary)
    await call.answer()


@router.callback_query(SalesExportStates.viewing_shipments, F.data == "main")
async def back_to_main(call: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await call.answer()

