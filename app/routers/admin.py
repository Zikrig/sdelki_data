from __future__ import annotations

from decimal import Decimal

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message

from sqlalchemy import delete, select

from ..db import AsyncSessionLocal
from ..keyboards import admin_list_kb, confirm_delete_kb, list_buttons, main_menu_kb
from ..models import Counterparty, Product

router = Router(name="admin")


class SupplierStates(StatesGroup):
    waiting_name = State()
    editing_name = State()


class ProductStates(StatesGroup):
    waiting_name = State()
    waiting_code = State()
    waiting_retail = State()
    waiting_purchase = State()
    editing_field = State()


@router.callback_query(F.data.in_({"manage_suppliers", "manage_products"}))
async def entry_point(call: CallbackQuery) -> None:
    if call.data == "manage_suppliers":
        await show_suppliers(call)
    elif call.data == "manage_products":
        await show_products(call)


async def show_suppliers(call: CallbackQuery) -> None:
    async with AsyncSessionLocal() as session:
        supplier_rows = (
            await session.execute(select(Counterparty).order_by(Counterparty.name))
        ).scalars().all()
    items = [(c.name, f"supplier_edit:{c.id}") for c in supplier_rows]
    await call.message.edit_text(
        "–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏:",
        reply_markup=admin_list_kb(items, "supplier"),
    )
    await call.answer()


async def show_products(call: CallbackQuery) -> None:
    async with AsyncSessionLocal() as session:
        product_rows = (
            await session.execute(select(Product).order_by(Product.name))
        ).scalars().all()
    items = [(f"{p.code} {p.name}", f"product_edit:{p.id}") for p in product_rows]
    await call.message.edit_text(
        "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç:",
        reply_markup=admin_list_kb(items, "product"),
    )
    await call.answer()


@router.callback_query(F.data == "admin_back_to_main")
async def back_to_main(call: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await call.answer()


# --- Supplier management ---
@router.callback_query(F.data == "supplier_add")
async def supplier_add_start(call: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(SupplierStates.waiting_name)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    await call.answer()


@router.message(SupplierStates.waiting_name)
async def supplier_save_name(message, state: FSMContext) -> None:
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    async with AsyncSessionLocal() as session:
        session.add(Counterparty(name=name))
        await session.commit()
    await state.clear()
    await message.answer("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu_kb())


@router.callback_query(F.data.startswith("supplier_edit:"))
async def supplier_edit(call: CallbackQuery, state: FSMContext) -> None:
    supplier_id = int(call.data.split(":", 1)[1])
    async with AsyncSessionLocal() as session:
        supplier = (
            await session.execute(
                select(Counterparty).where(Counterparty.id == supplier_id)
            )
        ).scalar_one()
    await state.update_data(edit_supplier_id=supplier_id)
    await call.message.edit_text(
        f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier.name}",
        reply_markup=list_buttons(
            [
                ("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "supplier_edit_name"),
                ("üóë –£–¥–∞–ª–∏—Ç—å", f"supplier_delete_confirm:{supplier_id}"),
            ],
            columns=1,
            back="manage_suppliers",
        ),
    )
    await call.answer()


@router.callback_query(F.data == "supplier_edit_name")
async def supplier_edit_name(call: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(SupplierStates.editing_name)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    await call.answer()


@router.message(SupplierStates.editing_name)
async def supplier_update_name(message, state: FSMContext) -> None:
    data = await state.get_data()
    supplier_id = int(data["edit_supplier_id"])  # type: ignore[index]
    new_name = (message.text or "").strip()
    if not new_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    async with AsyncSessionLocal() as session:
        supplier = (
            await session.execute(
                select(Counterparty).where(Counterparty.id == supplier_id)
            )
        ).scalar_one()
        supplier.name = new_name
        await session.commit()
    await state.clear()
    await message.answer("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu_kb())


@router.callback_query(F.data.startswith("supplier_delete_confirm:"))
async def supplier_delete_confirm(call: CallbackQuery) -> None:
    supplier_id = int(call.data.split(":", 1)[1])
    await call.message.edit_text(
        "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞?",
        reply_markup=confirm_delete_kb(supplier_id, "supplier"),
    )
    await call.answer()


@router.callback_query(F.data.startswith("supplier_delete:"))
async def supplier_delete(call: CallbackQuery) -> None:
    supplier_id = int(call.data.split(":", 1)[1])
    async with AsyncSessionLocal() as session:
        await session.execute(delete(Counterparty).where(Counterparty.id == supplier_id))
        await session.commit()
    await show_suppliers(call)


@router.callback_query(F.data == "supplier_cancel")
async def supplier_cancel(call: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await show_suppliers(call)


# --- Product management ---
PRODUCT_FIELDS = ["name", "code", "retail", "purchase"]


@router.callback_query(F.data == "product_add")
async def product_add_start(call: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(product_form={})
    await state.set_state(ProductStates.waiting_name)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await call.answer()


@router.message(ProductStates.waiting_name)
async def product_add_name(message, state: FSMContext) -> None:
    name = (message.text or "").strip()
    if not name:
        await message.answer("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    form = data.get("product_form", {})
    form["name"] = name
    await state.update_data(product_form=form)
    await state.set_state(ProductStates.waiting_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):")


@router.message(ProductStates.waiting_code)
async def product_add_code(message, state: FSMContext) -> None:
    try:
        code = int((message.text or "").strip())
    except Exception:
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    form = data.get("product_form", {})
    form["code"] = code
    await state.update_data(product_form=form)
    await state.set_state(ProductStates.waiting_retail)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –≤ –∫–æ–ø–µ–π–∫–∞—Ö:")


@router.message(ProductStates.waiting_retail)
async def product_add_retail(message, state: FSMContext) -> None:
    try:
        retail = int((message.text or "").strip())
    except Exception:
        await message.answer("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –≤ –∫–æ–ø–µ–π–∫–∞—Ö.")
        return
    data = await state.get_data()
    form = data.get("product_form", {})
    form["retail_price_cents"] = retail
    await state.update_data(product_form=form)
    await state.set_state(ProductStates.waiting_purchase)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö:")


@router.message(ProductStates.waiting_purchase)
async def product_add_purchase(message, state: FSMContext) -> None:
    try:
        purchase = int((message.text or "").strip())
    except Exception:
        await message.answer("–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –≤ –∫–æ–ø–µ–π–∫–∞—Ö.")
        return
    data = await state.get_data()
    form = data.get("product_form", {})
    form["purchase_price_cents"] = purchase
    await state.update_data(product_form=form)
    async with AsyncSessionLocal() as session:
        session.add(
            Product(
                code=form["code"],
                name=form["name"],
                retail_price_cents=form["retail_price_cents"],
                purchase_price_cents=form["purchase_price_cents"],
            )
        )
        await session.commit()

    await state.clear()
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu_kb())


@router.callback_query(F.data.startswith("product_edit:"))
async def product_edit(call: CallbackQuery, state: FSMContext) -> None:
    product_id = int(call.data.split(":", 1)[1])
    async with AsyncSessionLocal() as session:
        product = (
            await session.execute(select(Product).where(Product.id == product_id))
        ).scalar_one()
    await state.update_data(edit_product_id=product_id)
    await call.message.edit_text(
        f"–¢–æ–≤–∞—Ä: {product.code} {product.name}",
        reply_markup=list_buttons(
            [
                ("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "product_edit_name"),
                ("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥", "product_edit_code"),
                ("‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏", "product_edit_retail"),
                ("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫—É–ø–∫—É", "product_edit_purchase"),
                ("üóë –£–¥–∞–ª–∏—Ç—å", f"product_delete_confirm:{product_id}"),
            ],
            columns=1,
            back="manage_products",
        ),
    )
    await call.answer()


async def _update_product_field(state: FSMContext, field: str, prompt: str, next_state: State) -> str:
    await state.update_data(product_edit_field=field)
    await state.set_state(next_state)
    return prompt


@router.callback_query(F.data == "product_edit_name")
async def product_edit_name(call: CallbackQuery, state: FSMContext) -> None:
    prompt = await _update_product_field(state, "name", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:", ProductStates.editing_field)
    await call.message.edit_text(prompt)
    await call.answer()


@router.callback_query(F.data == "product_edit_code")
async def product_edit_code(call: CallbackQuery, state: FSMContext) -> None:
    prompt = await _update_product_field(state, "code", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ (—á–∏—Å–ª–æ):", ProductStates.editing_field)
    await call.message.edit_text(prompt)
    await call.answer()


@router.callback_query(F.data == "product_edit_retail")
async def product_edit_retail(call: CallbackQuery, state: FSMContext) -> None:
    prompt = await _update_product_field(state, "retail_price_cents", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö):", ProductStates.editing_field)
    await call.message.edit_text(prompt)
    await call.answer()


@router.callback_query(F.data == "product_edit_purchase")
async def product_edit_purchase(call: CallbackQuery, state: FSMContext) -> None:
    prompt = await _update_product_field(state, "purchase_price_cents", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É (–≤ –∫–æ–ø–µ–π–∫–∞—Ö):", ProductStates.editing_field)
    await call.message.edit_text(prompt)
    await call.answer()




@router.message(ProductStates.editing_field)
async def product_save_field(message, state: FSMContext) -> None:
    data = await state.get_data()
    field = data.get("product_edit_field")
    product_id = int(data["edit_product_id"])  # type: ignore[index]
    if not field:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    value = (message.text or "").strip()
    try:
        if field == "code":
            value_parsed = int(value)
        elif field in {"retail_price_cents", "purchase_price_cents"}:
            value_parsed = int(value)
        else:
            value_parsed = value
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with AsyncSessionLocal() as session:
        product = (
            await session.execute(select(Product).where(Product.id == product_id))
        ).scalar_one()
        setattr(product, field, value_parsed)
        await session.commit()

    await state.clear()
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=main_menu_kb())


@router.callback_query(F.data.startswith("product_delete_confirm:"))
async def product_delete_confirm(call: CallbackQuery) -> None:
    product_id = int(call.data.split(":", 1)[1])
    await call.message.edit_text(
        "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?",
        reply_markup=confirm_delete_kb(product_id, "product"),
    )
    await call.answer()


@router.callback_query(F.data.startswith("product_delete:"))
async def product_delete(call: CallbackQuery) -> None:
    product_id = int(call.data.split(":", 1)[1])
    async with AsyncSessionLocal() as session:
        await session.execute(delete(Product).where(Product.id == product_id))
        await session.commit()
    await show_products(call)


@router.callback_query(F.data == "product_cancel")
async def product_cancel(call: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await show_products(call)
