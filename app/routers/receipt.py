from __future__ import annotations

from decimal import Decimal

from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from sqlalchemy import select
from sqlalchemy.sql import func, desc

from ..db import AsyncSessionLocal
from ..keyboards import list_buttons, main_menu_kb
from ..models import Counterparty, Product, Receipt, ReceiptItem, Constants
from ..services.pdf import (
    ReceiptItemData,
    ReceiptPdfData,
    build_receipt_form_pdf,
    build_receipt_pdf,
    format_quantity,
)


router = Router(name="receipt")


class ReceiptStates(StatesGroup):
    waiting_counterparty = State()
    waiting_product = State()
    waiting_qty = State()
    waiting_price = State()
    waiting_new_price = State()
    confirming_add_more = State()
    stock_insufficient = State()


@router.callback_query(F.data == "start_receipt")
async def start_receipt(call: CallbackQuery, state: FSMContext) -> None:
    async with AsyncSessionLocal() as session:
        counterparties = (
            await session.execute(select(Counterparty).order_by(Counterparty.name))
        ).scalars().all()

    items = [(c.name, f"rcp_cp:{c.id}") for c in counterparties]
    await state.set_state(ReceiptStates.waiting_counterparty)

    try:
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:",
            reply_markup=list_buttons(items, columns=1, back="main"),
        )
    except TelegramBadRequest:
        await call.answer("–ú–µ–Ω—é —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è", show_alert=False)
        return

    await call.answer()


@router.callback_query(F.data.startswith("rcp_cp:"))
async def chosen_counterparty(call: CallbackQuery, state: FSMContext) -> None:
    counterparty_id = int(call.data.split(":", 1)[1])
    await state.update_data(counterparty_id=counterparty_id, items=[])

    async with AsyncSessionLocal() as session:
        products = (
            await session.execute(select(Product).order_by(Product.name))
        ).scalars().all()

    items = [(p.name, f"rcp_p:{p.id}") for p in products]
    await state.set_state(ReceiptStates.waiting_product)

    try:
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=list_buttons(items, columns=1, back="main"),
        )
    except TelegramBadRequest:
        await call.answer("–ú–µ–Ω—é —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è", show_alert=False)
        return

    await call.answer()


@router.callback_query(F.data.startswith("rcp_p:"))
async def chosen_product(call: CallbackQuery, state: FSMContext) -> None:
    product_id = int(call.data.split(":", 1)[1])
    await state.update_data(current_product_id=product_id)
    await state.set_state(ReceiptStates.waiting_qty)

    await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π):", reply_markup=None)
    await call.answer()


@router.message(ReceiptStates.waiting_qty)
async def input_quantity(message: Message, state: FSMContext) -> None:
    text = (message.text or "").replace(",", ".").strip()

    try:
        quantity = Decimal(text)
        if quantity <= 0:
            raise ValueError
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    data = await state.get_data()
    product_id = int(data["current_product_id"])  # type: ignore[index]
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
    from ..routers.reports import get_product_stock
    
    current_stock = await get_product_stock(product_id)
    
    if quantity > current_stock:
        # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤
        await state.update_data(requested_quantity=str(quantity))
        await state.set_state(ReceiptStates.stock_insufficient)
        
        buttons = [
            ("–£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ", "rcp_enter_different_qty"),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–æ—Ç–ø—É—Å—Ç–∏—Ç—å {–æ—Å—Ç–∞—Ç–æ–∫}" –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–ª—å—à–µ 0
        if current_stock > 0:
            buttons.append((f"–û—Ç–ø—É—Å—Ç–∏—Ç—å {format_quantity(current_stock)}", f"rcp_use_stock_qty:{current_stock}"))
        
        buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "rcp_back_to_product"))
        
        await message.answer(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤!\n"
            f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {format_quantity(quantity)}\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {format_quantity(current_stock)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=list_buttons(buttons, columns=1)
        )
        return

    # –û—Å—Ç–∞—Ç–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    await state.update_data(current_quantity=str(quantity))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–ª—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    counterparty_id = int(data["counterparty_id"])  # type: ignore[index]
    
    async with AsyncSessionLocal() as session:
        last_price = (
            await session.execute(
                select(ReceiptItem.purchase_price_cents)
                .select_from(Receipt)
                .join(Receipt.items)
                .where(
                    Receipt.counterparty_id == counterparty_id,
                    ReceiptItem.product_id == product_id,
                )
                .order_by(desc(Receipt.id))
                .limit(1)
            )
        ).scalar_one_or_none()
        
        if last_price is not None:
            last_price_rub = last_price / 100
            price_text = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {last_price_rub:.2f} ‚ÇΩ"
            buttons = [
                ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª—É—é —Ü–µ–Ω—É", f"rcp_use_last_price:{last_price}"),
                ("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É", "rcp_enter_new_price"),
            ]
        else:
            product = (await session.execute(select(Product).where(Product.id == product_id))).scalar_one()
            default_price_cents = product.purchase_price_cents
            default_price_rub = default_price_cents / 100
            price_text = f"–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {default_price_rub:.2f} ‚ÇΩ"
            buttons = [
                ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É", f"rcp_use_last_price:{default_price_cents}"),
                ("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É", "rcp_enter_new_price"),
            ]
    
    await state.set_state(ReceiptStates.waiting_price)
    await message.answer(
        f"{price_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=list_buttons(buttons, columns=1, back="rcp_back_to_product")
    )


@router.callback_query(ReceiptStates.waiting_price, F.data.startswith("rcp_use_last_price:"))
async def rcp_use_last_price(call: CallbackQuery, state: FSMContext):
    price_cents = int(call.data.split(":", 1)[1])
    await rcp_process_price_selection(call, state, price_cents)

@router.callback_query(ReceiptStates.waiting_price, F.data == "rcp_enter_new_price")
async def rcp_enter_new_price(call: CallbackQuery, state: FSMContext):
    await state.set_state(ReceiptStates.waiting_new_price)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π):")
    await call.answer()


@router.callback_query(ReceiptStates.waiting_price, F.data == "rcp_back_to_product")
async def rcp_back_to_product_from_price(call: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
    await state.set_state(ReceiptStates.waiting_product)
    
    async with AsyncSessionLocal() as session:
        products = (await session.execute(select(Product).order_by(Product.name))).scalars().all()
    
    if not products:
        await call.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ.", reply_markup=main_menu_kb())
        await call.answer()
        return
    
    buttons = [(f"{p.code} {p.name}", f"rcp_p:{p.id}") for p in products]
    buttons.append(("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main"))
    
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=list_buttons(buttons, columns=1)
    )
    await call.answer()

@router.message(ReceiptStates.waiting_new_price)
async def rcp_input_new_price(message: Message, state: FSMContext):
    raw_price = (message.text or "").strip().replace(",", ".")
    try:
        price_rub = float(raw_price)
        if price_rub < 0:
            raise ValueError
        price_cents = int(price_rub * 100)
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π).")
        return
    
    await rcp_process_price_selection(message, state, price_cents)

async def rcp_process_price_selection(message_or_call, state: FSMContext, price_cents: int):
    data = await state.get_data()
    product_id = int(data["current_product_id"])  # type: ignore[index]
    quantity = Decimal(data["current_quantity"])  # type: ignore[index]
    counterparty_id = int(data["counterparty_id"])  # type: ignore[index]

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π –∑–∞–∫—É–ø–æ—á–Ω–æ–π —Ü–µ–Ω—ã
    from ..routers.reports import get_average_purchase_price

    async with AsyncSessionLocal() as session:
        product = (
            await session.execute(select(Product).where(Product.id == product_id))
        ).scalar_one()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        average_purchase_price = await get_average_purchase_price(product_id)

        item = ReceiptItemData(
            line_number=len(data.get("items", [])) + 1,  # type: ignore[arg-type]
            product_name=product.name,
            product_code=product.code,
            quantity=quantity,
            purchase_price_cents=average_purchase_price,
        )

    items = data.get("items", [])  # type: ignore[assignment]
    items.append(
        {
            "line_number": item.line_number,
            "product_id": product_id,
            "product_name": item.product_name,
            "product_code": item.product_code,
            "quantity": str(item.quantity),
            "purchase_price_cents": item.purchase_price_cents,
        }
    )

    await state.update_data(items=items)
    await state.set_state(ReceiptStates.confirming_add_more)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ–±—ä–µ–∫—Ç - message –∏–ª–∏ call
    if hasattr(message_or_call, 'answer'):
        await message_or_call.answer(
            "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
            reply_markup=list_buttons(
                [
                    ("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "rcp_add_more"),
                    ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "rcp_finish"),
                    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "rcp_back_to_product"),
                ],
                columns=1,
            ),
        )
    else:
        await message_or_call.message.edit_text(
            "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?",
            reply_markup=list_buttons(
                [
                    ("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "rcp_add_more"),
                    ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "rcp_finish"),
                    ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "rcp_back_to_product"),
                ],
                columns=1,
            ),
        )
        await message_or_call.answer()


@router.callback_query(ReceiptStates.confirming_add_more, F.data == "rcp_add_more")
async def add_more_items(call: CallbackQuery, state: FSMContext) -> None:
    async with AsyncSessionLocal() as session:
        products = (
            await session.execute(select(Product).order_by(Product.name))
        ).scalars().all()

    items = [(p.name, f"rcp_p:{p.id}") for p in products]

    await state.set_state(ReceiptStates.waiting_product)

    try:
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=list_buttons(items, columns=1, back="rcp_finish"),
        )
    except TelegramBadRequest:
        await call.answer("–ú–µ–Ω—é —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è", show_alert=False)
        return

    await call.answer()


@router.callback_query(ReceiptStates.confirming_add_more, F.data == "rcp_back_to_product")
async def rcp_back_to_product_from_confirm(call: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
    await state.set_state(ReceiptStates.waiting_product)
    
    async with AsyncSessionLocal() as session:
        products = (await session.execute(select(Product).order_by(Product.name))).scalars().all()
    
    if not products:
        await call.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ.", reply_markup=main_menu_kb())
        await call.answer()
        return
    
    buttons = [(f"{p.code} {p.name}", f"rcp_p:{p.id}") for p in products]
    buttons.append(("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main"))
    
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=list_buttons(buttons, columns=1)
    )
    await call.answer()


@router.callback_query(ReceiptStates.confirming_add_more, F.data == "rcp_finish")
async def finish_receipt(call: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    counterparty_id = int(data["counterparty_id"])  # type: ignore[index]
    items_data = data.get("items", [])

    if not items_data:
        await call.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        counterparty = (
            await session.execute(select(Counterparty).where(Counterparty.id == counterparty_id))
        ).scalar_one()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–ª–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const_number = (
            await session.execute(
                select(Constants.value).where(Constants.key == "last_receipt_number")
            )
        ).scalar_one_or_none()
        
        if const_number:
            doc_number = int(const_number) + 1
        else:
            last_doc = (
                await session.execute(
                    select(func.max(Receipt.doc_number))
                )
            ).scalar_one()
            doc_number = (last_doc or 0) + 1

        receipt = Receipt(doc_number=doc_number, counterparty_id=counterparty_id)
        session.add(receipt)
        await session.flush()

        created_items: list[ReceiptItem] = []

        for stored_item in items_data:
            product = (
                await session.execute(select(Product).where(Product.id == stored_item["product_id"]))
            ).scalar_one()

            receipt_item = ReceiptItem(
                receipt_id=receipt.id,
                product_id=product.id,
                line_number=stored_item["line_number"],
                product_name=stored_item["product_name"],
                product_code=stored_item["product_code"],
                quantity=Decimal(stored_item["quantity"]),
                purchase_price_cents=stored_item["purchase_price_cents"],
            )

            session.add(receipt_item)
            created_items.append(receipt_item)

            product.purchase_price_cents = stored_item["purchase_price_cents"]

        await session.commit()
        await session.refresh(receipt)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
        existing_const = (
            await session.execute(
                select(Constants).where(Constants.key == "last_receipt_number")
            )
        ).scalar_one_or_none()
        
        if existing_const:
            existing_const.value = str(doc_number)
        else:
            session.add(Constants(key="last_receipt_number", value=str(doc_number)))
        
        await session.commit()

    await call.message.edit_reply_markup(None)

    pdf_items = [
        ReceiptItemData(
            line_number=item.line_number,
            product_name=item.product_name,
            product_code=item.product_code,
            quantity=item.quantity,
            purchase_price_cents=item.purchase_price_cents,
        )
        for item in created_items
    ]

    pdf_data = ReceiptPdfData(
        doc_number=receipt.doc_number,
        created_at=receipt.created_at,
        counterparty_name=counterparty.name,
        items=pdf_items,
    )

    form_pdf = build_receipt_form_pdf(pdf_data)

    total_purchase = pdf_data.total_purchase_cents

    await call.message.answer_document(
        document=BufferedInputFile(form_pdf, filename="prihodnaya.pdf"),
        caption="–ü—Ä–∏—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è",
    )

    await call.message.answer(
        f"–ü—Ä–∏—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –°—É–º–º–∞ –∑–∞–∫—É–ø–∫–∏: {total_purchase // 100},{total_purchase % 100:02d} ‚ÇΩ",
        reply_markup=main_menu_kb(),
    )

    await state.clear()
    await call.answer()


@router.callback_query(ReceiptStates.stock_insufficient, F.data == "rcp_enter_different_qty")
async def rcp_enter_different_qty(call: CallbackQuery, state: FSMContext):
    await state.set_state(ReceiptStates.waiting_qty)
    await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π):", reply_markup=None)
    await call.answer()


@router.callback_query(ReceiptStates.stock_insufficient, F.data.startswith("rcp_use_stock_qty:"))
async def rcp_use_stock_qty(call: CallbackQuery, state: FSMContext):
    stock_qty = Decimal(call.data.split(":", 1)[1])
    await state.update_data(current_quantity=str(stock_qty))
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å —Ü–µ–Ω–æ–π
    data = await state.get_data()
    product_id = int(data["current_product_id"])  # type: ignore[index]
    counterparty_id = int(data["counterparty_id"])  # type: ignore[index]
    
    async with AsyncSessionLocal() as session:
        last_price = (
            await session.execute(
                select(ReceiptItem.purchase_price_cents)
                .select_from(Receipt)
                .join(Receipt.items)
                .where(
                    Receipt.counterparty_id == counterparty_id,
                    ReceiptItem.product_id == product_id,
                )
                .order_by(desc(Receipt.id))
                .limit(1)
            )
        ).scalar_one_or_none()
        
        if last_price is not None:
            last_price_rub = last_price / 100
            price_text = f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {last_price_rub:.2f} ‚ÇΩ"
            buttons = [
                ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª—É—é —Ü–µ–Ω—É", f"rcp_use_last_price:{last_price}"),
                ("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É", "rcp_enter_new_price"),
            ]
        else:
            product = (await session.execute(select(Product).where(Product.id == product_id))).scalar_one()
            default_price_cents = product.purchase_price_cents
            default_price_rub = default_price_cents / 100
            price_text = f"–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞: {default_price_rub:.2f} ‚ÇΩ"
            buttons = [
                ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É", f"rcp_use_last_price:{default_price_cents}"),
                ("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É", "rcp_enter_new_price"),
            ]
    
    await state.set_state(ReceiptStates.waiting_price)
    await call.message.edit_text(
        f"{price_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=list_buttons(buttons, columns=1)
    )
    await call.answer()


@router.callback_query(ReceiptStates.stock_insufficient, F.data == "rcp_back_to_product")
async def rcp_back_to_product(call: CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
    await state.set_state(ReceiptStates.waiting_product)
    
    async with AsyncSessionLocal() as session:
        products = (await session.execute(select(Product).order_by(Product.name))).scalars().all()
    
    if not products:
        await call.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ.", reply_markup=main_menu_kb())
        await call.answer()
        return
    
    buttons = [(f"{p.code} {p.name}", f"rcp_p:{p.id}") for p in products]
    buttons.append(("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main"))
    
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=list_buttons(buttons, columns=1)
    )
    await call.answer()


